services:
#  kafka-1:
#    image: apache/kafka:latest
#    container_name: kafka-1
#    environment:
#      KAFKA_PROCESS_ROLES: controller,broker
#      KAFKA_NODE_ID: 1
#      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://0.0.0.0:9092
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
#      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster-1
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#    ports:
#      - "9092:9092"
#    networks:
#      - backend
#
#  kafka-2:
#    image: apache/kafka:latest
#    container_name: kafka-2
#    environment:
#      KAFKA_PROCESS_ROLES: controller,broker
#      KAFKA_NODE_ID: 2
#      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://0.0.0.0:9092
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
#      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster-1
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#    ports:
#      - "9093:9092"
#    networks:
#      - backend
#
#  kafka-3:
#    image: apache/kafka:latest
#    container_name: kafka-3
#    environment:
#      KAFKA_PROCESS_ROLES: controller,broker
#      KAFKA_NODE_ID: 3
#      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://0.0.0.0:9092
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
#      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster-1
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#    ports:
#      - "9094:9092"
#    networks:
#      - backend

  postgres:
    image: postgres:16
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: sndb
      POSTGRES_USER: snuser
      POSTGRES_PASSWORD: tesT123s4n
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U snuser -d sndb" ]
      interval: 10s
      timeout: 5s
      retries: 5

  sn-user:
    build:
      context: sn-user # Refers to the directory containing your Dockerfile
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/sndb
      SPRING_DATASOURCE_USERNAME: snuser
      SPRING_DATASOURCE_PASSWORD: tesT123s4n
    networks:
      - backend


  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - backend

volumes:
  postgres_data:
  keycloak_data:

networks:
  backend:
    driver: bridge